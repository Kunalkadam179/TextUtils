{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setmyStyle","btntext","setbtntext","className","style","classNameName","id","type","onClick","border","Navbar","props","mode","to","title","aboutText","toggleMode","role","htmlFor","TextForm","text","setText","console","log","heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","darkMode","setdarkMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.34eac0ff.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle, setmyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white',\r\n    })\r\n\r\n    const [btntext, setbtntext] = useState(\"Eable Dark Mode\")\r\n    \r\n    const toggleStyle = () => {\r\n        if(myStyle.color === 'white')\r\n        {\r\n            setmyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white',\r\n            });\r\n            setbtntext(\"Enable Dark mode\");\r\n        }\r\n        else\r\n        {\r\n            setmyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '1px solid white',\r\n            });\r\n            setbtntext(\"Enable Light mode\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <h1 classNameName=\"my-3\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button \" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" >\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <br />\r\n            <div classNameName=\"container my-3\">\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={toggleStyle}>{btntext}</button>\r\n            </div>\r\n            <br />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                    <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                    </li>\r\n                </ul>\r\n                {/* <form className=\"d-flex\">\r\n                    <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                    <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                </form> */}\r\n                <div className={`form-check form-switch text-${props.mode==='light'? 'dark':'light'}`}>\r\n                    <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n}","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () =>{\r\n        // console.log(\"UpperCase was clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Upper Case!\", \"success\")\r\n    }\r\n\r\n    const handleLoClick = () =>{\r\n        // console.log(\"LowerCase was clicked\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lower Case!\", \"success\")\r\n    }\r\n\r\n    const handleClearClick = () =>{\r\n        // console.log(\"Clear Text was clicked\");\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text is Cleared!\", \"success\")\r\n    }\r\n\r\n    const handleCopyClick = () =>{\r\n        // console.log(\"Copy Text was clicked\");\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text is Coppied!\", \"success\")\r\n    }\r\n\r\n    const handleExtraSpace = () => {\r\n        let newText= text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Space Removed!\", \"success\")\r\n    }\r\n\r\n    const handleOnChange = (event) =>{\r\n        //console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    console.log()\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color: props.mode==='light'? 'black':'white'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} \r\n                        style={{backgroundColor: props.mode ==='light'? 'white':'#042743', color: props.mode==='light'? 'black':'white'}} \r\n                        id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopyClick}>Copt Text</button>\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpace}>Remove Extra Space</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode==='light'? 'black':'white'}}>\r\n                <h2>You text Summary</h2>\r\n                <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} Munutes to Read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0 ? text: \"Enter something in the textbox above to preview it here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        let lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n\n  const [darkMode, setdarkMode] = useState('light'); //whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    },1500)\n  }\n\n  const toggleMode= () => {\n    if(darkMode === 'light')\n    {\n      setdarkMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\")\n      // setInterval(() => {\n      //   document.title = 'TextUtil';\n      // }, 2000); //Used   to have blinking text in the browser\n    }\n    else\n    {\n      setdarkMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\")\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navbar title=\"TextUtils\" aboutText=\"About\" mode={darkMode} toggleMode={toggleMode}/>\n        <Alert alert={alert}/>\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm heading=\"Enter the text to analyze below\" showAlert={showAlert} mode={darkMode}/>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}